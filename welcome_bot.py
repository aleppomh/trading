#!/usr/bin/env python
"""
ุจูุช ุชุฑุญูุจ ูุณุชูู
ุจูุช ุจุณูุท ูุณุชุฎุฏู Long Polling ูุฅุฑุณุงู ุฑุณุงุฆู ุชุฑุญูุจ ููุท
"""

import os
import sys
import time
import logging
import asyncio
import json
from typing import Dict, Any, List
from pathlib import Path

try:
    # ูุญุงููุฉ ุงุณุชูุฑุงุฏ ููุชุจุฉ python-telegram-bot
    from telegram import Bot, Update
    from telegram.ext import (
        Application, CommandHandler, MessageHandler, 
        CallbackContext, filters, ExtBot
    )
    TELEGRAM_IMPORT_SUCCESS = True
except ImportError:
    TELEGRAM_IMPORT_SUCCESS = False
    print("Telegram library not found, using direct API instead")

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("welcome_bot")

# ------------------ ูุธุงุฆู ูุณุงุนุฏุฉ ------------------

def load_bot_tokens() -> List[str]:
    """
    ุชุญููู ูุงุฆูุฉ ุชูููุงุช ุงูุจูุชุงุช ูู ุงููููุงุช ุงููุฎุชููุฉ
    """
    tokens = []
    
    # ูุญุงููุฉ ุชุญููู ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
    env_token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if env_token:
        tokens.append(env_token)
    
    # ูุญุงููุฉ ุชุญููู ูู ููู ุงูุชููุฆุฉ
    config_path = Path("config/bots.json")
    if config_path.exists():
        try:
            with open(config_path, "r") as f:
                data = json.load(f)
                for bot_info in data:
                    if "token" in bot_info and bot_info["token"] and bot_info["token"] not in tokens:
                        tokens.append(bot_info["token"])
        except Exception as e:
            logger.warning(f"Failed to load from config file: {e}")
    
    # ูุญุงููุฉ ุชุญููู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช (ุฅุฐุง ุฃููู)
    try:
        # ุงุณุชูุฑุงุฏ ูุญุฏุฉ ุงูููุงุฐุฌ
        sys.path.append(os.getcwd())
        from models import TradingBot
        from app import app, db
        
        with app.app_context():
            bots = TradingBot.query.all()
            for bot in bots:
                if bot.bot_token and bot.bot_token not in tokens:
                    tokens.append(bot.bot_token)
    except Exception as e:
        logger.warning(f"Failed to load from database: {e}")
    
    # ุฅุฒุงูุฉ ุงูููู ุงููุงุฑุบุฉ ุฃู ุงูููุฑุฑุฉ
    return list(set([t for t in tokens if t]))

def get_welcome_message(first_name: str, language_code: str = "ar") -> str:
    """
    ุงูุญุตูู ุนูู ูุต ุฑุณุงูุฉ ุงูุชุฑุญูุจ ุญุณุจ ุงููุบุฉ
    """
    if language_code.lower() in ["ar", "arabic"]:
        return f"""*ูุฑุญุจุงู {first_name}* ๐
        
*ุฃููุง ุจู ูู ุจูุช ุฅุดุงุฑุงุช ุงูุชุฏุงูู ุงููุชูุฏู!* ๐
        
๐น ูุฐุง ุงูุจูุช ููุฏู ุฅุดุงุฑุงุช ุชุฏุงูู ุนุงููุฉ ุงูุฏูุฉ ููุฎูุงุฑุงุช ุงูุซูุงุฆูุฉ
๐น ุชู ุชุทููุฑ ูุธุงู ุงูุฅุดุงุฑุงุช ุจุงุณุชุฎุฏุงู ุฎูุงุฑุฒููุงุช ุฐููุฉ ููุชุญููู ุงูููู
๐น ุฌููุน ุงูุฅุดุงุฑุงุช ุชุชุถูู:
   โข ุฑูุฒ ุงูุฒูุฌ
   โข ุชูููุช ุงูุฏุฎูู
   โข ูุฏุฉ ุงูุชุฏุงูู
   โข ููุน ุงูุตููุฉ (CALL/PUT)
   โข ุงุญุชูุงููุฉ ุงููุฌุงุญ

๐ฐ *ุณุชุตูู ุงูุฅุดุงุฑุงุช ุจุดูู ุชููุงุฆู ูู 5 ุฏูุงุฆู ุชูุฑูุจุงู*

ูููุฒูุฏ ูู ุงููุนูููุงุช ุฃู ุงูุงุณุชูุณุงุฑุงุชุ ูุฑุฌู ุงูุชูุงุตู ูุน:
๐จโ๐ป @ALEPPOMH
        
*ุดูุฑุงู ูุงุณุชุฎุฏุงูู ุฎุฏูุงุชูุง* ๐
"""
    else:
        return f"""*Welcome {first_name}* ๐
        
*Welcome to our Advanced Trading Signals Bot!* ๐
        
๐น This bot provides high-accuracy trading signals for binary options
๐น Our signal system is developed using intelligent technical analysis algorithms
๐น All signals include:
   โข Pair symbol
   โข Entry time
   โข Trade duration
   โข Trade type (CALL/PUT)
   โข Success probability

๐ฐ *You will receive signals automatically approximately every 5 minutes*

For more information or inquiries, please contact:
๐จโ๐ป @ALEPPOMH
        
*Thank you for using our services* ๐
"""

# ------------------ ูุงุฌูุฉ ููุชุจุฉ ุชูุฌุฑุงู ------------------

async def start_command(update: Update, context: CallbackContext) -> None:
    """
    ูุนุงูุฌุฉ ุฃูุฑ ุงูุจุฏุก (/start)
    """
    user = update.effective_user
    first_name = user.first_name or "ุงููุณุชุฎุฏู"
    language_code = user.language_code or "ar"
    
    # ุงูุญุตูู ุนูู ุฑุณุงูุฉ ุงูุชุฑุญูุจ ุงูููุงุณุจุฉ
    welcome_text = get_welcome_message(first_name, language_code)
    
    # ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุชุฑุญูุจ
    await update.message.reply_text(
        welcome_text,
        parse_mode="Markdown"
    )
    logger.info(f"Sent welcome message to {user.id} ({first_name}) using library")

async def run_welcome_bot_with_library(token: str, use_polling: bool = True) -> None:
    """
    ุชุดุบูู ุจูุช ุงูุชุฑุญูุจ ุจุงุณุชุฎุฏุงู ุงูููุชุจุฉ
    
    Args:
        token: ุชููู ุงูุจูุช
        use_polling: ุงุณุชุฎุฏุงู Long Polling ุจุฏูุงู ูู Webhook
    """
    # ุฅูุดุงุก ุชุทุจูู ุงูุจูุช
    application = Application.builder().token(token).build()
    
    # ุฅุถุงูุฉ ูุนุงูุฌ ุฃูุฑ /start
    application.add_handler(CommandHandler("start", start_command))
    
    if use_polling:
        # ุชุดุบูู ุงูุจูุช ุจุงุณุชุฎุฏุงู Long Polling
        await application.initialize()
        await application.start_polling(
            allowed_updates=["message"],
            drop_pending_updates=True
        )
        logger.info(f"Bot started with token {token[:8]}... in polling mode")
        
        # ุฅุจูุงุก ุงูุจูุช ููุฏ ุงูุชุดุบูู
        try:
            await application.updater.start_polling()
            await asyncio.sleep(60)  # ุงุณุชูุฑุงุฑ ููุฏุฉ ุฏูููุฉ ูุงุญุฏุฉ ุซู ุงูุฅููุงุก ูุชุฌูุจ ุงุณุชููุงู ุงูููุงุฑุฏ
        finally:
            await application.stop()
    else:
        # ุณูุชู ุงูุชุนุงูู ูุน ุงูููุจ ููู ูููุตูุงู
        pass

# ------------------ ูุงุฌูุฉ REST API ุงููุจุงุดุฑุฉ ------------------

def send_welcome_via_api(token: str, user_id: int, first_name: str, language_code: str = "ar") -> Dict[str, Any]:
    """
    ุฅุฑุณุงู ุฑุณุงูุฉ ุชุฑุญูุจ ูุจุงุดุฑุฉ ุนุจุฑ ูุงุฌูุฉ ุจุฑูุฌุฉ ุชุทุจููุงุช ุชูุฌุฑุงู
    
    Args:
        token: ุชููู ุงูุจูุช
        user_id: ูุนุฑู ุงููุณุชุฎุฏู
        first_name: ุงุณู ุงููุณุชุฎุฏู
        language_code: ุฑูุฒ ุงููุบุฉ
        
    Returns:
        dict: ูุชูุฌุฉ ุงูุฅุฑุณุงู
    """
    import requests
    
    # ุงูุญุตูู ุนูู ุฑุณุงูุฉ ุงูุชุฑุญูุจ
    message_text = get_welcome_message(first_name, language_code)
    
    # ุฅุนุฏุงุฏ ุทูุจ API
    api_url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {
        "chat_id": user_id,
        "text": message_text,
        "parse_mode": "Markdown",
        "disable_web_page_preview": True
    }
    
    try:
        # ุฅุฑุณุงู ุงูุทูุจ
        response = requests.post(api_url, json=payload, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if data.get("ok", False):
            logger.info(f"Successfully sent welcome message to {user_id} via direct API")
        else:
            logger.error(f"Failed to send welcome message: {data.get('description', 'Unknown error')}")
            
        return data
    except Exception as e:
        error_message = f"Error during API request: {str(e)}"
        logger.error(error_message)
        return {"ok": False, "error": error_message}

def send_welcome_from_all_bots(user_id: int, first_name: str = "ุงููุณุชุฎุฏู", language_code: str = "ar") -> Dict[str, Any]:
    """
    ุฅุฑุณุงู ุฑุณุงูุฉ ุชุฑุญูุจ ูู ุฌููุน ุงูุจูุชุงุช ุงููุณุฌูุฉ
    
    Args:
        user_id: ูุนุฑู ุงููุณุชุฎุฏู
        first_name: ุงุณู ุงููุณุชุฎุฏู
        language_code: ุฑูุฒ ุงููุบุฉ
        
    Returns:
        dict: ูุชูุฌุฉ ุงูุฅุฑุณุงู
    """
    # ุชุญููู ูุงูุฉ ุงูุชูููุงุช
    tokens = load_bot_tokens()
    
    if not tokens:
        return {"ok": False, "error": "No bot tokens found"}
    
    # ูุญุงููุฉ ุฅุฑุณุงู ูู ุฌููุน ุงูุจูุชุงุช
    results = {}
    success = False
    
    for i, token in enumerate(tokens):
        # ุฅุถุงูุฉ ุชุฃุฎูุฑ ุจูู ุงูุฑุณุงุฆู
        if i > 0:
            time.sleep(1)
            
        # ูุญุงููุฉ ุงูุฅุฑุณุงู
        result = send_welcome_via_api(token, user_id, first_name, language_code)
        results[f"bot_{i}"] = result
        
        if result.get("ok", False):
            success = True
    
    return {
        "ok": success,
        "results": results,
        "message": "Successfully sent welcome message from at least one bot" if success else "Failed to send welcome message from any bot"
    }

# ------------------ ููุทุฉ ุงูุฏุฎูู ุงูุฑุฆูุณูุฉ ------------------

async def main() -> None:
    """
    ุงูููุทุฉ ุงูุฑุฆูุณูุฉ ูุชุดุบูู ุงูุจูุช
    """
    # ุชุญููู ุงูุชูููุงุช
    tokens = load_bot_tokens()
    
    if not tokens:
        logger.error("No bot tokens found")
        return
    
    logger.info(f"Found {len(tokens)} bot tokens")
    
    if TELEGRAM_IMPORT_SUCCESS:
        # ุงุณุชุฎุฏุงู ุงูููุชุจุฉ ุฅุฐุง ูุงูุช ูุชุงุญุฉ (ุฃูุถู)
        for token in tokens:
            try:
                await run_welcome_bot_with_library(token)
            except Exception as e:
                logger.error(f"Error running bot with token {token[:8]}...: {e}")
    else:
        # ุงุณุชุฎุฏุงู ูุงุฌูุฉ API ุงููุจุงุดุฑุฉ ุฅุฐุง ูู ุชูู ุงูููุชุจุฉ ูุชุงุญุฉ (ุงุญุชูุงุทู)
        logger.info("Running in direct API mode")
        
        # ุงุฎุชุจุงุฑ ุงูุฅุฑุณุงู ุฅูู ูุนุฑู ูุญุฏุฏ (ููุงุฎุชุจุงุฑ ููุท)
        test_user_id = os.environ.get("TEST_USER_ID")
        if test_user_id:
            result = send_welcome_from_all_bots(test_user_id, "Test User", "ar")
            logger.info(f"Test send result: {result}")
        
        logger.info("Welcome bot functionality is available through direct API calls")

if __name__ == "__main__":
    """
    ุชุดุบูู ุงูุจูุช ูู standalone script
    """
    # ุงูุญุตูู ุนูู ูุนุฑู ุงููุณุชุฎุฏู ูู ูุณูุทุงุช ุณุทุฑ ุงูุฃูุงูุฑ (ุฅุฐุง ุชู ุชุญุฏูุฏู)
    if len(sys.argv) > 1 and sys.argv[1].isdigit():
        user_id = int(sys.argv[1])
        name = sys.argv[2] if len(sys.argv) > 2 else "ุงููุณุชุฎุฏู"
        lang = sys.argv[3] if len(sys.argv) > 3 else "ar"
        
        # ุฅุฑุณุงู ุฑุณุงูุฉ ุชุฑุญูุจ
        result = send_welcome_from_all_bots(user_id, name, lang)
        print(json.dumps(result, indent=2, ensure_ascii=False))
    else:
        # ุชุดุบูู ุงูุจูุช
        if TELEGRAM_IMPORT_SUCCESS:
            asyncio.run(main())
        else:
            print("Please install python-telegram-bot package or provide a user_id as argument")
            print("Usage: python welcome_bot.py USER_ID [FIRST_NAME] [LANGUAGE_CODE]")